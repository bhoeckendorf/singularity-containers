bootstrap: localimage
from: bh_arch.sif

%runscript
    source /etc/profile.d/*
    conda activate
    exec python "$@"

%startscript
    source /etc/profile.d/*
    conda activate
    exec jupyter lab \
      --config=${CONDA_HOME}/etc/jupyter/jupyter_config.py \
      --notebook-dir=${MYDIR} "$@"

%apprun python
    source /etc/profile.d/*
    conda activate
    exec python "$@"

%apprun ipython
    source /etc/profile.d/*
    conda activate
    exec ipython "$@"

%apprun jupyter
    source /etc/profile.d/*
    conda activate
    exec jupyter lab \
      --config=${CONDA_HOME}/etc/jupyter/jupyter_config.py \
      --notebook-dir=${MYDIR} \
      "$@"

%apprun code
    source /etc/profile.d/*
    # conda activate
    exec code-server \
      --config=${CODER_HOME}/etc/config.yaml \
      --disable-telemetry \
      ${MYDIR}

%apprun tensorboard
    source /etc/profile.d/*
    conda activate
    exec tensorboard --logdir="$@"

%apprun pytorch_test_gpu
    source /etc/profile.d/*
    conda activate
    exec python -c "import torch
print(torch.cuda.is_available())"

%apprun tensorflow_test_gpu
    source /etc/profile.d/*
    conda activate
    exec python -c "import tensorflow as tf
print(tf.config.list_physical_devices('GPU'))"

%files
    software/l_ipp_2020.3.304.tgz     /root/
    config/gitignore                  /etc/gitignore
    config/gitconfig                  /etc/gitconfig
    config/nginx.conf                 /etc/nginx/
    config/condarc                    /etc/conda/condarc
    conda_envs/base.yml               /root/
    config/jupyter_config.py          /opt/conda/etc/jupyter/
    config/nginx_jupyter.conf         /opt/conda/etc/jupyter/
    config/dask_preload_jupyter.py    /etc/dask/preload_jupyter.py
    config/dask_distributed.yml       /etc/dask/distributed.yml
    config/dask_jobqueue.yml          /etc/dask/jobqueue.yml
    config/code-server_config.yml     /opt/code-server/etc/config.yaml
    config/nginx_code-server.conf     /opt/code-server/etc/
    secrets/htpasswd                  /etc/nginx/.htpasswd
    secrets/dhparam.pem               /etc/ssl/
    secrets/bh-selfsigned.key         /etc/ssl/private/
    secrets/bh-selfsigned.crt         /etc/ssl/certs/

%post
    export CBIDIR=/research/sharedresources/cbi
    export MYDIR=${CBIDIR}/common/burkhard
    export CARGO_HOME=${MYDIR}/var/cargo
    export GOPATH=${MYDIR}/var/go
    export JAVA_HOME=/usr/lib/jvm/default
    export JRE_HOME=${JAVA_HOME}
    export CONDA_HOME=/opt/conda
    export JULIA_DEPOT_PATH=${MYDIR}/var/julia
    export CODER_HOME=/opt/code-server
    export PATH=${PATH}:/opt/cuda/bin:${CARGO_HOME}/bin:${GOPATH}/bin:${CODER_HOME}/bin



    ########################
    #  OS package manager  #
    ########################

    pacman -Syu --noconfirm
    pacman -S --needed --noconfirm \
      base-devel gdb clang lld lldb openmp intel-tbb intel-mkl ccache cmake git git-lfs tk cpio \
      blas cblas openblas lapack lapacke eigen fftw hdf5 ffmpeg openimageio zlib sqlite \
      jdk11-openjdk jre11-openjdk-headless openjdk11-src openjdk11-doc kotlin maven gradle \
      cuda cudnn nccl nvtop opencl-nvidia magma arrayfire \
      rust rust-analyzer go julia npm yarn doxygen opencv vtk nginx-mainline gnuplot texlive-most biber vim \
      freetds cyrus-sasl-gssapi cyrus-sasl-ldap cyrus-sasl-sql gsasl lsb-release unixodbc

    mkdir -p /var/cache/pacman/pkg
    yes | pacman -Scc
    rm -rf /var/cache/pacman/pkg

    source /etc/profile.d/jre.sh

    # Intel IPP
    cd /root/
    tar -xzf l_ipp_2020.3.304.tgz
    cd l_ipp_2020.3.304/
    printf "\
ACCEPT_EULA=accept
CONTINUE_WITH_OPTIONAL_ERROR=yes
PSET_INSTALL_DIR=/opt/intel
CONTINUE_WITH_INSTALLDIR_OVERWRITE=yes
COMPONENTS=DEFAULTS
PSET_MODE=install
#CLUSTER_INSTALL_MACHINES_FILE=filepat
SIGNING_ENABLED=yes
ARCH_SELECTED=ALL
" > bh_silent.cfg
    ./install.sh -s bh_silent.cfg
    cd ..
    rm -rf l_ipp_2020.3.304.tgz l_ipp_2020.3.304/
    cd



    ########################
    #  nginx               #
    ########################

    # file permissions not ideal, but needed to run in container without root
    mkdir -p /run/nginx /etc/nginx/sites-available /etc/nginx/sites-enabled
    chmod -R 644 \
      /etc/ssl/dhparam.pem /etc/ssl/certs/bh-selfsigned.crt /etc/ssl/private/bh-selfsigned.key \
      /etc/nginx/nginx.conf
    chmod -R 777 /var/lib/nginx/ /var/log/nginx/ /run/nginx/ /etc/nginx/sites-*



    ########################
    #  conda & Jupyter     #
    ########################

    curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    bash Miniconda3-latest-Linux-x86_64.sh -b -u -p ${CONDA_HOME}
    rm Miniconda3-latest-Linux-x86_64.sh
    ln -s ${CONDA_HOME}/etc/profile.d/conda.sh /etc/profile.d/conda.sh

    source /etc/profile.d/conda.sh

    # Setup conda envs parent, pkg cache, local conda channel
    # Safe to do if already setup. Disabled because MYDIR isn't mounted during build.
    # mkdir -p \
    #   ${MYDIR}/var/conda/channel/linux-64 \
    #   ${MYDIR}/var/conda/channel/noarch \
    #   ${MYDIR}/var/conda/envs \
    #   ${MYDIR}/var/conda/pkgs
    # conda index ${MYDIR}/var/conda/channel

    conda update --all
    conda install "mamba>=0.7"

    conda activate base
    mamba env update -f /root/base.yml
    ${CONDA_HOME}/bin/python -m pip install --no-cache-dir --extra-index-url https://developer.download.nvidia.com/compute/redist nvidia-dali-cuda100 nvidia-dali-tf-plugin-cuda100
    ${CONDA_HOME}/bin/python -m pip install --no-cache-dir jax jaxlib==0.1.57+cuda101 -f https://storage.googleapis.com/jax-releases/jax_releases.html
    ${CONDA_HOME}/bin/python -m pip install --no-cache-dir detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cu101/torch1.7/index.html
    ${CONDA_HOME}/bin/python -m pip install --no-cache-dir mmcv-full==latest+torch1.7.0+cu101 -f https://download.openmmlab.com/mmcv/dist/index.html
    ${CONDA_HOME}/bin/python -m pip install --no-cache-dir git+https://github.com/open-mmlab/mmclassification.git
    ${CONDA_HOME}/bin/python -m pip install --no-cache-dir git+https://github.com/open-mmlab/mmdetection.git
    ${CONDA_HOME}/bin/python -m pip install --no-cache-dir git+https://github.com/open-mmlab/mmsegmentation.git
    ${CONDA_HOME}/bin/python -m pip install --no-cache-dir git+https://github.com/open-mmlab/mmpose.git
    ${CONDA_HOME}/bin/python -m pip install --no-cache-dir git+https://github.com/open-mmlab/mmediting.git
    ${CONDA_HOME}/bin/python -m pip install --no-cache-dir git+https://github.com/open-mmlab/mmtracking.git
    ${CONDA_HOME}/bin/python -m pip install --no-cache-dir git+https://github.com/open-mmlab/openselfsup.git

    #${CONDA_HOME}/bin/jupyter labextension install @jupyter-widgets/jupyterlab-manager
    #${CONDA_HOME}/bin/jupyter labextension install \
    #  jupyter-matplotlib jupyterlab-datawidgets @pyviz/jupyterlab_pyviz itkwidgets @jupyter-voila/jupyterlab-preview qgrid2 # k3d @bokeh/jupyter_bokeh # jupyterlab-nvdashboard
    #  # jupyterlab_tensorboard @ryantam626/jupyterlab_code_formatter
    #${CONDA_HOME}/bin/jupyter serverextension enable --py \
    #  jupyter_http_over_ws # voila # jupyterlab_code_formatter

    ${CONDA_HOME}/bin/jupyter labextension install itkwidgets # jupyterlab-nvdashboard
    ${CONDA_HOME}/bin/jupyter lab build
    conda deactivate

    chmod 644 ${CONDA_HOME}/etc/jupyter/jupyter_config.py ${CONDA_HOME}/etc/jupyter/nginx_jupyter.conf
    ln -s ${CONDA_HOME}/etc/jupyter/nginx_jupyter.conf /etc/nginx/sites-available/jupyter.conf
    #ln -s /etc/nginx/sites-available/jupyter.conf /etc/nginx/sites-enabled/

    # Enable conda channels, envs, pkgs. Initially disabled because paths aren't mounted during build.
    sed -i "s/  # -/  -/" /etc/conda/condarc

    rm -r \
      ${CONDA_HOME}/share/jupyter/kernels/xcpp11 \
      ${CONDA_HOME}/share/jupyter/kernels/xcpp14 \
      /root/base.yml
    chmod -R 777 /etc/conda/condarc ${CONDA_HOME}/pkgs
    chmod -R 644 /etc/dask/



    ########################
    #  Rust, Go, Julia     #
    ########################

    # Rust Jupyter kernel
    cargo install evcxr_jupyter
    evcxr_jupyter --install
    mv /root/.local/share/jupyter/kernels/rust ${CONDA_HOME}/share/jupyter/kernels/

    # Go general tooling, required for vscode integration
    go get -u \
      github.com/nsf/gocode \
      github.com/uudashr/gopkgs/cmd/gopkgs \
      github.com/ramya-rao-a/go-outline \
      github.com/rogpeppe/godef \
      github.com/sqs/goreturns \
      golang.org/x/lint/golint

#      gocode-gomod \

    # Go Jupyter kernel
    env GO111MODULE=off go get -d -u github.com/gopherdata/gophernotes
    cd "$(go env GOPATH)"/src/github.com/gopherdata/gophernotes
    env GO111MODULE=on go install
    mkdir -p ${CONDA_HOME}/share/jupyter/kernels/gophernotes
    cp kernel/* ${CONDA_HOME}/share/jupyter/kernels/gophernotes
    cd ${CONDA_HOME}/share/jupyter/kernels/gophernotes
    chmod +w ./kernel.json
    sed "s|gophernotes|$(go env GOPATH)/bin/gophernotes|" < kernel.json.in > kernel.json
    cd

    # Julia Jupyter kernel
    julia -e "using Pkg; Pkg.add(\"IJulia\");"
    mv /root/.local/share/jupyter/kernels/julia* ${CONDA_HOME}/share/jupyter/kernels/


    ########################
    #  coder               #
    ########################

    curl -fsSL https://code-server.dev/install.sh | sh -s -- --method=standalone --prefix=${CODER_HOME}
    rm -rf /root/.config/code-server
    export PATH=${PATH}:${CODER_HOME}/bin

    code-server --config=${CODER_HOME}/etc/config.yaml --install-extension ms-vscode.cpptools
    code-server --config=${CODER_HOME}/etc/config.yaml --install-extension llvm-vs-code-extensions.vscode-clangd
    code-server --config=${CODER_HOME}/etc/config.yaml --install-extension xaver.clang-format
    code-server --config=${CODER_HOME}/etc/config.yaml --install-extension ms-vscode.cmake-tools
    # code-server --config=${CODER_HOME}/etc/config.yaml --install-extension redhat.java
    # code-server --config=${CODER_HOME}/etc/config.yaml --install-extension vscjava.vscode-java-pack
    # code-server --config=${CODER_HOME}/etc/config.yaml --install-extension mathiasfrohlich.kotlin
    code-server --config=${CODER_HOME}/etc/config.yaml --install-extension ms-python.python
    code-server --config=${CODER_HOME}/etc/config.yaml --install-extension ms-python.anaconda-extension-pack
    # code-server --config=${CODER_HOME}/etc/config.yaml --install-extension rust-lang.rust
    # code-server --config=${CODER_HOME}/etc/config.yaml --install-extension golang.go
    # code-server --config=${CODER_HOME}/etc/config.yaml --install-extension donjayamanne.githistory
    # code-server --config=${CODER_HOME}/etc/config.yaml --install-extension James-Yu.latex-workshop
    # code-server --config=${CODER_HOME}/etc/config.yaml --install-extension dbankier.vscode-instant-markdown
    # code-server --config=${CODER_HOME}/etc/config.yaml --install-extension yzane.markdown-pdf
    # code-server --config=${CODER_HOME}/etc/config.yaml --install-extension redhat.vscode-xml
    # code-server --config=${CODER_HOME}/etc/config.yaml --install-extension redhat.vscode-yaml
    # code-server --config=${CODER_HOME}/etc/config.yaml --install-extension bungcip.better-toml
    # code-server --config=${CODER_HOME}/etc/config.yaml --install-extension streetsidesoftware.code-spell-checker

    chmod -R 777 ${CODER_HOME}
    ln -s ${CODER_HOME}/etc/nginx_code-server.conf /etc/nginx/sites-available/code-server.conf
    ln -s /etc/nginx/sites-available/code-server.conf /etc/nginx/sites-enabled/
    chmod -R 644 /etc/nginx/sites-*

%environment
    export CBIDIR=/research/sharedresources/cbi
    export MYDIR=${CBIDIR}/common/burkhard
    export CARGO_HOME=${MYDIR}/var/cargo
    export GOPATH=${MYDIR}/var/go
    export JAVA_HOME=/usr/lib/jvm/default
    export JRE_HOME=${JAVA_HOME}
    export CONDA_HOME=/opt/conda
    export JULIA_DEPOT_PATH=${MYDIR}/var/julia
    export CODER_HOME=/opt/code-server
    source /etc/profile.d/*
    export MLFLOW_TRACKING_URI=https://bioimg-wkst03.stjude.sjcrh.local:5000
    export MLFLOW_TRACKING_USERNAME=burkhard
    export JUPYTER_ALLOW_INSECURE_WRITES=true
    export HPC_DIR=/hpcf/lsf/lsf_prod/10.1/linux3.10-glibc2.17-x86_64/bin
    export PATH=${PATH}:/opt/cuda/bin:${CARGO_HOME}/bin:${GOPATH}/bin:${CODER_HOME}/bin:${HPC_DIR}
    export CC=/usr/bin/clang
    export CXX=/usr/bin/clang++
